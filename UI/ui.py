# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\mark.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QMouseEvent, QWheelEvent

class myWidget(QtWidgets.QWidget):
    def __init__(self, parent = None):
        super(myWidget, self).__init__(parent)
        self.parent = parent

class myQGroupBox(QtWidgets.QGroupBox):
    def __init__(self, parent = None):
        super(myQGroupBox, self).__init__(parent)
        self.parent = parent

class myFocusView(QtWidgets.QGraphicsView):
    def __init__(self, parent = None):
        super(myFocusView, self).__init__(parent)
        self.parent = parent
        self.dragging = False
        self.mark_erase_flag = False

    def map_to_scene(self, pos: QtCore.QPoint) -> QtCore.QPointF:
        """Map the position of the mouse to the scene coordinates."""
        return self.mapToScene(pos)
    
    def mousePressEvent(self, event: QMouseEvent | None) -> None:
        if event.button() == QtCore.Qt.LeftButton:
            self.dragging = True
            self.mark_erase_flag = False
        elif event.button() == QtCore.Qt.RightButton:
            self.dragging = True
            self.mark_erase_flag = True

    def mouseMoveEvent(self, event: QMouseEvent | None) -> None:
        if self.dragging:
            if self.objectName() == 'x_view_focus':
                pos = self.map_to_scene(event.pos())
                dx = pos.x() - self.parent.parent.parent.rect_length
                dy = pos.y() - self.parent.parent.parent.rect_length
                mark_coord = [self.parent.parent.parent.x_slice_slider.value(), \
                              self.parent.parent.parent.y_slice_slider.value() + int(dx), \
                              self.parent.parent.parent.z_slice_slider.value() - int(dy)]
                self.parent.parent.parent.focus_mark(mark_coord, self.mark_erase_flag)
            elif self.objectName() == 'y_view_focus':
                pos = self.map_to_scene(event.pos())
                dx = pos.x() - self.parent.parent.parent.rect_length
                dy = pos.y() - self.parent.parent.parent.rect_length
                mark_coord = [self.parent.parent.parent.x_slice_slider.value() + int(dx), \
                              self.parent.parent.parent.y_slice_slider.value(), \
                              self.parent.parent.parent.z_slice_slider.value() - int(dy)]
                self.parent.parent.parent.focus_mark(mark_coord, self.mark_erase_flag)
            elif self.objectName() == 'z_view_focus':
                pos = self.map_to_scene(event.pos())
                dx = pos.x() - self.parent.parent.parent.rect_length
                dy = pos.y() - self.parent.parent.parent.rect_length
                mark_coord = [self.parent.parent.parent.x_slice_slider.value() + int(dx), \
                              self.parent.parent.parent.y_slice_slider.value() - int(dy), \
                              self.parent.parent.parent.z_slice_slider.value()]
                self.parent.parent.parent.focus_mark(mark_coord, self.mark_erase_flag)
    
    def mouseReleaseEvent(self, event: QMouseEvent | None) -> None:
        if event.button() == QtCore.Qt.LeftButton:
            self.dragging = False
        elif event.button() == QtCore.Qt.RightButton:
            self.dragging = False

    def wheelEvent(self, event: QWheelEvent | None) -> None:
        """
        Changing the rect length by mouse wheel
        """
        if event.angleDelta().y() > 0:
            self.parent.parent.parent.focus_slider.setValue(min(self.parent.parent.parent.focus_slider.value() + 5, self.parent.parent.parent.focus_slider.maximum()))
        else:
            self.parent.parent.parent.focus_slider.setValue(max(self.parent.parent.parent.focus_slider.value() - 5, self.parent.parent.parent.focus_slider.minimum()))

class myQGraphicsView(QtWidgets.QGraphicsView):
    def __init__(self, parent = None):
        super(myQGraphicsView, self).__init__(parent)
        self.parent = parent
        self.dragging = False
        self.start_drag_pos = None

    def map_to_scene(self, pos: QtCore.QPoint) -> QtCore.QPointF:
        """Map the position of the mouse to the scene coordinates."""
        return self.mapToScene(pos)

    def mousePressEvent(self, event: QMouseEvent | None) -> None:
        if event.button() == QtCore.Qt.LeftButton:
            self.dragging = True
            self.start_drag_pos = event.pos()
            if self.objectName() == 'x_view':
                # get the position of the mouse in the scene
                pos = self.map_to_scene(event.pos())
                self.parent.parent.parent.y_slice_slider.setValue(int(pos.x()))
                self.parent.parent.parent.z_slice_slider.setValue(abs(min(int(pos.y()), self.parent.parent.parent.z_slice_slider.maximum()) - \
                                                                      self.parent.parent.parent.z_slice_slider.maximum()))
            elif self.objectName() == 'y_view':
                pos = self.map_to_scene(event.pos())
                self.parent.parent.parent.x_slice_slider.setValue(int(pos.x()))
                self.parent.parent.parent.z_slice_slider.setValue(abs(min(int(pos.y()), self.parent.parent.parent.z_slice_slider.maximum()) - \
                                                                      self.parent.parent.parent.z_slice_slider.maximum()))
            elif self.objectName() == 'z_view':
                pos = self.map_to_scene(event.pos())
                self.parent.parent.parent.x_slice_slider.setValue(int(pos.x()))
                self.parent.parent.parent.y_slice_slider.setValue(abs(min(int(pos.y()), self.parent.parent.parent.y_slice_slider.maximum()) - \
                                                                      self.parent.parent.parent.y_slice_slider.maximum()))
    
    def mouseMoveEvent(self, event: QMouseEvent | None) -> None:
        if self.dragging:
            cur_pos = self.mapToScene(event.pos())
            if self.objectName() == 'x_view':
                self.parent.parent.parent.y_slice_slider.setValue(int(cur_pos.x()))
                self.parent.parent.parent.z_slice_slider.setValue(abs(min(int(cur_pos.y()), self.parent.parent.parent.z_slice_slider.maximum()) - \
                                                                      self.parent.parent.parent.z_slice_slider.maximum()))
            elif self.objectName() == 'y_view':
                self.parent.parent.parent.x_slice_slider.setValue(int(cur_pos.x()))
                self.parent.parent.parent.z_slice_slider.setValue(abs(min(int(cur_pos.y()), self.parent.parent.parent.z_slice_slider.maximum()) - \
                                                                      self.parent.parent.parent.z_slice_slider.maximum()))
            elif self.objectName() == 'z_view':
                self.parent.parent.parent.x_slice_slider.setValue(int(cur_pos.x()))
                self.parent.parent.parent.y_slice_slider.setValue(abs(min(int(cur_pos.y()), self.parent.parent.parent.y_slice_slider.maximum()) - \
                                                                      self.parent.parent.parent.y_slice_slider.maximum()))
                
    def mouseReleaseEvent(self, event: QMouseEvent | None) -> None:
        if event.button() == QtCore.Qt.LeftButton:
            self.dragging = False
            self.start_drag_pos = None


    def wheelEvent(self, event: QtGui.QWheelEvent) -> None:
        """
        Changing slice by mouse wheel
        """
        if event.angleDelta().y() > 0:
            if self.objectName() == 'x_view':
                self.parent.parent.parent.x_slice_slider.setValue(min(self.parent.parent.parent.x_slice_slider.value() + 1, self.parent.parent.parent.x_slice_slider.maximum()))
            elif self.objectName() == 'y_view':
                self.parent.parent.parent.y_slice_slider.setValue(min(self.parent.parent.parent.y_slice_slider.value() + 1, self.parent.parent.parent.y_slice_slider.maximum()))
            elif self.objectName() == 'z_view':
                self.parent.parent.parent.z_slice_slider.setValue(min(self.parent.parent.parent.z_slice_slider.value() + 1, self.parent.parent.parent.z_slice_slider.maximum()))
        else:
            if self.objectName() == 'x_view':
                self.parent.parent.parent.x_slice_slider.setValue(max(self.parent.parent.parent.x_slice_slider.value() - 1, self.parent.parent.parent.x_slice_slider.minimum()))
            elif self.objectName() == 'y_view':
                self.parent.parent.parent.y_slice_slider.setValue(max(self.parent.parent.parent.y_slice_slider.value() - 1, self.parent.parent.parent.y_slice_slider.minimum()))
            elif self.objectName() == 'z_view':
                self.parent.parent.parent.z_slice_slider.setValue(max(self.parent.parent.parent.z_slice_slider.value() - 1, self.parent.parent.parent.z_slice_slider.minimum()))


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        self.centralwidget = myWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.slice_controller = QtWidgets.QGroupBox(self.centralwidget)
        self.slice_controller.setGeometry(QtCore.QRect(900, 670, 350, 141))
        self.slice_controller.setTitle("")
        self.slice_controller.setObjectName("slice_controller")
        self.z_plus_1 = QtWidgets.QPushButton(self.slice_controller)
        self.z_plus_1.setGeometry(QtCore.QRect(280, 100, 41, 30))
        self.z_plus_1.setObjectName("z_plus_1")
        self.z_slice_slider = QtWidgets.QSlider(self.slice_controller)
        self.z_slice_slider.setGeometry(QtCore.QRect(60, 100, 211, 30))
        self.z_slice_slider.setOrientation(QtCore.Qt.Horizontal)
        self.z_slice_slider.setObjectName("z_slice_slider")
        self.x_minus_1 = QtWidgets.QPushButton(self.slice_controller)
        self.x_minus_1.setGeometry(QtCore.QRect(10, 20, 41, 30))
        self.x_minus_1.setObjectName("x_minus_1")
        self.y_minus_1 = QtWidgets.QPushButton(self.slice_controller)
        self.y_minus_1.setGeometry(QtCore.QRect(10, 60, 41, 30))
        self.y_minus_1.setObjectName("y_minus_1")
        self.z_minus_1 = QtWidgets.QPushButton(self.slice_controller)
        self.z_minus_1.setGeometry(QtCore.QRect(10, 100, 41, 30))
        self.z_minus_1.setObjectName("z_minus_1")
        self.y_plus_1 = QtWidgets.QPushButton(self.slice_controller)
        self.y_plus_1.setGeometry(QtCore.QRect(280, 60, 41, 30))
        self.y_plus_1.setObjectName("y_plus_1")
        self.x_slice_slider = QtWidgets.QSlider(self.slice_controller)
        self.x_slice_slider.setGeometry(QtCore.QRect(60, 20, 211, 30))
        self.x_slice_slider.setOrientation(QtCore.Qt.Horizontal)
        self.x_slice_slider.setObjectName("x_slice_slider")
        self.y_slice_slider = QtWidgets.QSlider(self.slice_controller)
        self.y_slice_slider.setGeometry(QtCore.QRect(60, 60, 211, 30))
        self.y_slice_slider.setOrientation(QtCore.Qt.Horizontal)
        self.y_slice_slider.setObjectName("y_slice_slider")
        self.focus_slider = QtWidgets.QSlider(self.centralwidget)
        self.focus_slider.setGeometry(QtCore.QRect(1050, 820, 100, 30))
        self.focus_slider.setOrientation(QtCore.Qt.Horizontal)
        self.focus_slider.setObjectName("focus_slider")
        self.focus_slider_label = QtWidgets.QLabel(self.centralwidget)
        self.focus_slider_label.setGeometry(QtCore.QRect(950, 820, 81, 31))
        self.focus_slider_label.setObjectName("focus_slider_label")
        self.mask_alpha_slider_label = QtWidgets.QLabel(self.centralwidget)
        self.mask_alpha_slider_label.setGeometry(QtCore.QRect(950, 870, 81, 31))
        self.mask_alpha_slider_label.setObjectName("mask_alpha_slider_label")
        self.mask_alpha_slider = QtWidgets.QSlider(self.centralwidget)
        self.mask_alpha_slider.setGeometry(QtCore.QRect(1050, 870, 100, 30))
        self.mask_alpha_slider.setOrientation(QtCore.Qt.Horizontal)
        self.mask_alpha_slider.setObjectName("mask_alpha_slider")
        self.line_alpha_slider_label = QtWidgets.QLabel(self.centralwidget)
        self.line_alpha_slider_label.setGeometry(QtCore.QRect(950, 920, 81, 31))
        self.line_alpha_slider_label.setObjectName("line_alpha_slider_label")
        self.line_alpha_slider = QtWidgets.QSlider(self.centralwidget)
        self.line_alpha_slider.setGeometry(QtCore.QRect(1050, 920, 100, 30))
        self.line_alpha_slider.setOrientation(QtCore.Qt.Horizontal)
        self.line_alpha_slider.setObjectName("line_alpha_slider")
        self.x_plus_1 = QtWidgets.QPushButton(self.slice_controller)
        self.x_plus_1.setGeometry(QtCore.QRect(280, 20, 41, 30))
        self.x_plus_1.setObjectName("x_plus_1")
        self.main_view = myQGroupBox(self.centralwidget)
        self.main_view.setGeometry(QtCore.QRect(10, 50, 880, 950))
        self.main_view.setObjectName("main_view")
        self.y_view = myQGraphicsView(self.main_view)
        self.y_view.setGeometry(QtCore.QRect(21, 20, 400, 450))
        self.y_view.setObjectName("y_view")
        self.z_view = myQGraphicsView(self.main_view)
        self.z_view.setGeometry(QtCore.QRect(21, 490, 400, 450))
        self.z_view.setObjectName("z_view")
        self.x_view = myQGraphicsView(self.main_view)
        self.x_view.setGeometry(QtCore.QRect(470, 20, 400, 450))
        self.x_view.setObjectName("x_view")
        self.main_view_2 = myQGroupBox(self.centralwidget)
        self.main_view_2.setGeometry(QtCore.QRect(900, 50, 600, 600))
        self.main_view_2.setObjectName("main_view_2")
        self.y_view_focus = myFocusView(self.main_view_2)
        self.y_view_focus.setGeometry(QtCore.QRect(21, 20, 280, 280))
        self.y_view_focus.setObjectName("y_view_focus")
        self.z_view_focus = myFocusView(self.main_view_2)
        self.z_view_focus.setGeometry(QtCore.QRect(21, 310, 280, 280))
        self.z_view_focus.setObjectName("z_view_focus")
        self.x_view_focus = myFocusView(self.main_view_2)
        self.x_view_focus.setGeometry(QtCore.QRect(310, 20, 280, 280))
        self.x_view_focus.setObjectName("x_view_focus")
        self.record_coord = QtWidgets.QPushButton(self.centralwidget)
        self.record_coord.setGeometry(QtCore.QRect(1160, 820, 93, 28))
        self.record_coord.setObjectName("record_coord")
        self.select_folder = QtWidgets.QPushButton(self.centralwidget)
        self.select_folder.setGeometry(QtCore.QRect(30, 10, 93, 28))
        self.select_folder.setObjectName("select_folder")
        self.save_to_csv = QtWidgets.QPushButton(self.centralwidget)
        self.save_to_csv.setGeometry(QtCore.QRect(1400, 870, 93, 28))
        self.save_to_csv.setObjectName("save_to_csv")
        self.delete_coord = QtWidgets.QPushButton(self.centralwidget)
        self.delete_coord.setGeometry(QtCore.QRect(1160, 920, 93, 28))
        self.delete_coord.setObjectName("delete_coord")
        self.coord_list_sort = QtWidgets.QPushButton(self.centralwidget)
        self.coord_list_sort.setGeometry(QtCore.QRect(1400, 770, 93, 28))
        self.coord_list_sort.setObjectName("coord_list_sort")
        self.coord_list_clear = QtWidgets.QPushButton(self.centralwidget)
        self.coord_list_clear.setGeometry(QtCore.QRect(1400, 920, 93, 28))
        self.coord_list_clear.setObjectName("coord_list_clear")
        self.csv_restore = QtWidgets.QPushButton(self.centralwidget)
        self.csv_restore.setGeometry(QtCore.QRect(1400, 820, 93, 28))
        self.csv_restore.setObjectName("csv_restore")
        self.coord_list = QtWidgets.QListWidget(self.centralwidget)
        self.coord_list.setGeometry(QtCore.QRect(1510, 510, 390, 450))
        self.coord_list.setObjectName("coord_list")
        self.file_list = QtWidgets.QListWidget(self.centralwidget)
        self.file_list.setGeometry(QtCore.QRect(1510, 50, 390, 450))
        self.file_list.setObjectName("file_list")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1920, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.z_plus_1.setText(_translate("MainWindow", ">"))
        self.x_minus_1.setText(_translate("MainWindow", "<"))
        self.y_minus_1.setText(_translate("MainWindow", "<"))
        self.z_minus_1.setText(_translate("MainWindow", "<"))
        self.y_plus_1.setText(_translate("MainWindow", ">"))
        self.x_plus_1.setText(_translate("MainWindow", ">"))
        self.main_view.setTitle(_translate("MainWindow", "View"))
        self.main_view_2.setTitle(_translate("MainWindow", "Focus View"))
        self.record_coord.setText(_translate("MainWindow", "Record Coord"))
        self.select_folder.setText(_translate("MainWindow", "Select Folder"))
        self.save_to_csv.setText(_translate("MainWindow", "Save to CSV"))
        self.delete_coord.setText(_translate("MainWindow", "Delete Coord"))
        self.coord_list_sort.setText(_translate("MainWindow", "Sort by value"))
        self.coord_list_clear.setText(_translate("MainWindow", "Clear All"))
        self.csv_restore.setText(_translate("MainWindow", "Restore CSV"))
        self.focus_slider_label.setText(_translate("MainWindow", "Window Size"))
        self.mask_alpha_slider_label.setText(_translate("MainWindow", "Green Mask Alpha"))
        self.line_alpha_slider_label.setText(_translate("MainWindow", "Red Line Alpha"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
